# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from lka/Lanes.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import lka.msg

class Lanes(genpy.Message):
  _md5sum = "d937409978545c3e3e3fe66ef4b4e7c3"
  _type = "lka/Lanes"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """Lane[2] lane_lines
================================================================================
MSG: lka/Lane
bool exists
float64 slope
float64 y_cept
"""
  __slots__ = ['lane_lines']
  _slot_types = ['lka/Lane[2]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       lane_lines

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Lanes, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.lane_lines is None:
        self.lane_lines = [lka.msg.Lane() for _ in range(2)]
    else:
      self.lane_lines = [lka.msg.Lane() for _ in range(2)]

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      if len(self.lane_lines) != 2:
        self._check_types(ValueError("Expecting %s items but found %s when writing '%s'" % (2, len(self.lane_lines), 'self.lane_lines')))
      for val1 in self.lane_lines:
        _x = val1
        buff.write(_get_struct_B2d().pack(_x.exists, _x.slope, _x.y_cept))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.lane_lines is None:
        self.lane_lines = None
      end = 0
      self.lane_lines = []
      for i in range(0, 2):
        val1 = lka.msg.Lane()
        _x = val1
        start = end
        end += 17
        (_x.exists, _x.slope, _x.y_cept,) = _get_struct_B2d().unpack(str[start:end])
        val1.exists = bool(val1.exists)
        self.lane_lines.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      if len(self.lane_lines) != 2:
        self._check_types(ValueError("Expecting %s items but found %s when writing '%s'" % (2, len(self.lane_lines), 'self.lane_lines')))
      for val1 in self.lane_lines:
        _x = val1
        buff.write(_get_struct_B2d().pack(_x.exists, _x.slope, _x.y_cept))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.lane_lines is None:
        self.lane_lines = None
      end = 0
      self.lane_lines = []
      for i in range(0, 2):
        val1 = lka.msg.Lane()
        _x = val1
        start = end
        end += 17
        (_x.exists, _x.slope, _x.y_cept,) = _get_struct_B2d().unpack(str[start:end])
        val1.exists = bool(val1.exists)
        self.lane_lines.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B2d = None
def _get_struct_B2d():
    global _struct_B2d
    if _struct_B2d is None:
        _struct_B2d = struct.Struct("<B2d")
    return _struct_B2d
