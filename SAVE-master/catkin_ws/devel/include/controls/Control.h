// Generated by gencpp from file controls/Control.msg
// DO NOT EDIT!


#ifndef CONTROLS_MESSAGE_CONTROL_H
#define CONTROLS_MESSAGE_CONTROL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace controls
{
template <class ContainerAllocator>
struct Control_
{
  typedef Control_<ContainerAllocator> Type;

  Control_()
    : brake(0.0)
    , throttle(0.0)
    , steering(0.0)  {
    }
  Control_(const ContainerAllocator& _alloc)
    : brake(0.0)
    , throttle(0.0)
    , steering(0.0)  {
  (void)_alloc;
    }



   typedef double _brake_type;
  _brake_type brake;

   typedef double _throttle_type;
  _throttle_type throttle;

   typedef double _steering_type;
  _steering_type steering;





  typedef boost::shared_ptr< ::controls::Control_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::controls::Control_<ContainerAllocator> const> ConstPtr;

}; // struct Control_

typedef ::controls::Control_<std::allocator<void> > Control;

typedef boost::shared_ptr< ::controls::Control > ControlPtr;
typedef boost::shared_ptr< ::controls::Control const> ControlConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::controls::Control_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::controls::Control_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::controls::Control_<ContainerAllocator1> & lhs, const ::controls::Control_<ContainerAllocator2> & rhs)
{
  return lhs.brake == rhs.brake &&
    lhs.throttle == rhs.throttle &&
    lhs.steering == rhs.steering;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::controls::Control_<ContainerAllocator1> & lhs, const ::controls::Control_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace controls

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::controls::Control_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::controls::Control_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::controls::Control_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::controls::Control_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::controls::Control_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::controls::Control_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::controls::Control_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a50e54d6f035ba47c042e73d1ecdc700";
  }

  static const char* value(const ::controls::Control_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa50e54d6f035ba47ULL;
  static const uint64_t static_value2 = 0xc042e73d1ecdc700ULL;
};

template<class ContainerAllocator>
struct DataType< ::controls::Control_<ContainerAllocator> >
{
  static const char* value()
  {
    return "controls/Control";
  }

  static const char* value(const ::controls::Control_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::controls::Control_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 brake\n"
"float64 throttle\n"
"float64 steering\n"
;
  }

  static const char* value(const ::controls::Control_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::controls::Control_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.brake);
      stream.next(m.throttle);
      stream.next(m.steering);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Control_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::controls::Control_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::controls::Control_<ContainerAllocator>& v)
  {
    s << indent << "brake: ";
    Printer<double>::stream(s, indent + "  ", v.brake);
    s << indent << "throttle: ";
    Printer<double>::stream(s, indent + "  ", v.throttle);
    s << indent << "steering: ";
    Printer<double>::stream(s, indent + "  ", v.steering);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CONTROLS_MESSAGE_CONTROL_H
