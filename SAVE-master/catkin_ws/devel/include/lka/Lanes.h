// Generated by gencpp from file lka/Lanes.msg
// DO NOT EDIT!


#ifndef LKA_MESSAGE_LANES_H
#define LKA_MESSAGE_LANES_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <lka/Lane.h>

namespace lka
{
template <class ContainerAllocator>
struct Lanes_
{
  typedef Lanes_<ContainerAllocator> Type;

  Lanes_()
    : lane_lines()  {
    }
  Lanes_(const ContainerAllocator& _alloc)
    : lane_lines()  {
  (void)_alloc;
      lane_lines.assign( ::lka::Lane_<ContainerAllocator> (_alloc));
  }



   typedef boost::array< ::lka::Lane_<ContainerAllocator> , 2>  _lane_lines_type;
  _lane_lines_type lane_lines;





  typedef boost::shared_ptr< ::lka::Lanes_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lka::Lanes_<ContainerAllocator> const> ConstPtr;

}; // struct Lanes_

typedef ::lka::Lanes_<std::allocator<void> > Lanes;

typedef boost::shared_ptr< ::lka::Lanes > LanesPtr;
typedef boost::shared_ptr< ::lka::Lanes const> LanesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lka::Lanes_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lka::Lanes_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::lka::Lanes_<ContainerAllocator1> & lhs, const ::lka::Lanes_<ContainerAllocator2> & rhs)
{
  return lhs.lane_lines == rhs.lane_lines;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::lka::Lanes_<ContainerAllocator1> & lhs, const ::lka::Lanes_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace lka

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::lka::Lanes_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lka::Lanes_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lka::Lanes_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lka::Lanes_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lka::Lanes_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lka::Lanes_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lka::Lanes_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d937409978545c3e3e3fe66ef4b4e7c3";
  }

  static const char* value(const ::lka::Lanes_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd937409978545c3eULL;
  static const uint64_t static_value2 = 0x3e3fe66ef4b4e7c3ULL;
};

template<class ContainerAllocator>
struct DataType< ::lka::Lanes_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lka/Lanes";
  }

  static const char* value(const ::lka::Lanes_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lka::Lanes_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Lane[2] lane_lines\n"
"================================================================================\n"
"MSG: lka/Lane\n"
"bool exists\n"
"float64 slope\n"
"float64 y_cept\n"
;
  }

  static const char* value(const ::lka::Lanes_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lka::Lanes_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.lane_lines);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Lanes_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lka::Lanes_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lka::Lanes_<ContainerAllocator>& v)
  {
    s << indent << "lane_lines[]" << std::endl;
    for (size_t i = 0; i < v.lane_lines.size(); ++i)
    {
      s << indent << "  lane_lines[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::lka::Lane_<ContainerAllocator> >::stream(s, indent + "    ", v.lane_lines[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // LKA_MESSAGE_LANES_H
