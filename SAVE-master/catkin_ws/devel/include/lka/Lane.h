// Generated by gencpp from file lka/Lane.msg
// DO NOT EDIT!


#ifndef LKA_MESSAGE_LANE_H
#define LKA_MESSAGE_LANE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace lka
{
template <class ContainerAllocator>
struct Lane_
{
  typedef Lane_<ContainerAllocator> Type;

  Lane_()
    : exists(false)
    , slope(0.0)
    , y_cept(0.0)  {
    }
  Lane_(const ContainerAllocator& _alloc)
    : exists(false)
    , slope(0.0)
    , y_cept(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _exists_type;
  _exists_type exists;

   typedef double _slope_type;
  _slope_type slope;

   typedef double _y_cept_type;
  _y_cept_type y_cept;





  typedef boost::shared_ptr< ::lka::Lane_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lka::Lane_<ContainerAllocator> const> ConstPtr;

}; // struct Lane_

typedef ::lka::Lane_<std::allocator<void> > Lane;

typedef boost::shared_ptr< ::lka::Lane > LanePtr;
typedef boost::shared_ptr< ::lka::Lane const> LaneConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lka::Lane_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lka::Lane_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::lka::Lane_<ContainerAllocator1> & lhs, const ::lka::Lane_<ContainerAllocator2> & rhs)
{
  return lhs.exists == rhs.exists &&
    lhs.slope == rhs.slope &&
    lhs.y_cept == rhs.y_cept;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::lka::Lane_<ContainerAllocator1> & lhs, const ::lka::Lane_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace lka

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::lka::Lane_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lka::Lane_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lka::Lane_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lka::Lane_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lka::Lane_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lka::Lane_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lka::Lane_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d8fffbc133615afc331c7af31fc633d4";
  }

  static const char* value(const ::lka::Lane_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd8fffbc133615afcULL;
  static const uint64_t static_value2 = 0x331c7af31fc633d4ULL;
};

template<class ContainerAllocator>
struct DataType< ::lka::Lane_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lka/Lane";
  }

  static const char* value(const ::lka::Lane_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lka::Lane_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool exists\n"
"float64 slope\n"
"float64 y_cept\n"
;
  }

  static const char* value(const ::lka::Lane_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lka::Lane_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.exists);
      stream.next(m.slope);
      stream.next(m.y_cept);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Lane_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lka::Lane_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lka::Lane_<ContainerAllocator>& v)
  {
    s << indent << "exists: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.exists);
    s << indent << "slope: ";
    Printer<double>::stream(s, indent + "  ", v.slope);
    s << indent << "y_cept: ";
    Printer<double>::stream(s, indent + "  ", v.y_cept);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LKA_MESSAGE_LANE_H
