// Generated by gencpp from file lka/Margins.msg
// DO NOT EDIT!


#ifndef LKA_MESSAGE_MARGINS_H
#define LKA_MESSAGE_MARGINS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace lka
{
template <class ContainerAllocator>
struct Margins_
{
  typedef Margins_<ContainerAllocator> Type;

  Margins_()
    : margin_diff(0.0)  {
    }
  Margins_(const ContainerAllocator& _alloc)
    : margin_diff(0.0)  {
  (void)_alloc;
    }



   typedef double _margin_diff_type;
  _margin_diff_type margin_diff;





  typedef boost::shared_ptr< ::lka::Margins_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lka::Margins_<ContainerAllocator> const> ConstPtr;

}; // struct Margins_

typedef ::lka::Margins_<std::allocator<void> > Margins;

typedef boost::shared_ptr< ::lka::Margins > MarginsPtr;
typedef boost::shared_ptr< ::lka::Margins const> MarginsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lka::Margins_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lka::Margins_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::lka::Margins_<ContainerAllocator1> & lhs, const ::lka::Margins_<ContainerAllocator2> & rhs)
{
  return lhs.margin_diff == rhs.margin_diff;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::lka::Margins_<ContainerAllocator1> & lhs, const ::lka::Margins_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace lka

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::lka::Margins_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lka::Margins_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lka::Margins_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lka::Margins_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lka::Margins_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lka::Margins_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lka::Margins_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8a2be87eb93522a3eb44d383e70dffc2";
  }

  static const char* value(const ::lka::Margins_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8a2be87eb93522a3ULL;
  static const uint64_t static_value2 = 0xeb44d383e70dffc2ULL;
};

template<class ContainerAllocator>
struct DataType< ::lka::Margins_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lka/Margins";
  }

  static const char* value(const ::lka::Margins_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lka::Margins_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 margin_diff\n"
;
  }

  static const char* value(const ::lka::Margins_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lka::Margins_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.margin_diff);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Margins_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lka::Margins_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lka::Margins_<ContainerAllocator>& v)
  {
    s << indent << "margin_diff: ";
    Printer<double>::stream(s, indent + "  ", v.margin_diff);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LKA_MESSAGE_MARGINS_H
